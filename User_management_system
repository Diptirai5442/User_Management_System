package com.dipti.UsermanagementSystem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class UsermanagementSystemApplication {

	public static void main(String[] args) {
		SpringApplication.run(UsermanagementSystemApplication.class, args);
	}

}






package com.dipti.UsermanagementSystem.Model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {


    private Integer userId;
    private String name;


    private String userName;


    private String userContact;


    private String userAddress;

    public User(int i, String demo, String dmo, String number, String dmoDmoDmoDmoDmo) {
    }

    public Object getUserId() {
        return null;
    }

    public void setUserContact(String userContact) {
    }
}








package com.dipti.UsermanagementSystem.Repo;


import com.dipti.UsermanagementSystem.Model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class UserRepo {
    @Autowired
    private List<User> userList;
    public List<User> getUsers() {
        return userList;
    }


    public void delete(User user) {
        userList.remove(user);
    }
}





package com.dipti.UsermanagementSystem.Controller;

import org.apache.catalina.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class UserController {

    @Autowired
    UserController userService;


    @GetMapping(value = "users")
    public List<User> getAllUsers() {
        return userService.getAllUsers();
    }

    @GetMapping("users/search/{userId}")
    public User getUserByUserid(@PathVariable Integer userId) {
        return userService.getUserByUserid(userId);
    }

    @PostMapping("users") // add user
    public String addUser(@RequestBody User user) {
        return userService.createUser(user);
    }

    private String createUser(User user) {
        return null;
    }

    @DeleteMapping("users/delete/{userId}")

    public String DeleteUserById(@PathVariable Integer userId) {

        return userService.DeleteUserById(userId);
    }

    @PutMapping("users/{userId}/{userContact}")
    public String UpdateUser(@PathVariable Integer userId, @PathVariable String userContact) {
        return userService.updateUserContact(userId, userContact);
    }

    private String updateUserContact(Integer userId, String userContact) {
        return null;
    }
}





package com.dipti.UsermanagementSystem.Repo;


import com.dipti.UsermanagementSystem.Model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class UserRepo {
    @Autowired
    private List<User> userList;
    public List<User> getUsers() {
        return userList;
    }


    public void delete(User user) {
        userList.remove(user);
    }
}






package com.dipti.UsermanagementSystem.Service;

import com.dipti.UsermanagementSystem.Model.User;
import com.dipti.UsermanagementSystem.Repo.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserService {


    @Autowired

    UserRepo userRepo;
    private Integer userId;

    public  String DeleteUser(Integer userId) {
        for(User user : getAllUsers())
        {
            if(user.getUserId().equals(userId))
            {

                userRepo.delete(user);

                return "user removed for userID:" + userId;
            }
        }
        return  "User"+ userId + " is not deleted as it doesn't exist" ;
    }

    public List<User> getAllUsers() {

        return userRepo.getUsers();
    }


    public String createUser(User user) {
        List<User> originalList = getAllUsers();
        originalList.add(user);
        return "New user added";
    }


    public User getUserById(Integer userId) {
        this.userId = userId;

        for(User user : userRepo.getUsers())
        {
            if(user.getUserId().equals(userId))
            {
                return user;
            }
        }
        throw new IllegalStateException("UserId not found");
    }


    public String updateUserContact(Integer userId, String userContact) {

        for(User user : userRepo.getUsers())
        {
            if(user.getUserId().equals(userId))
            {
                user.setUserContact(userContact);
                return "User Contact updated for user ID:" + userId;
            }
        }

        return "user not found for user ID: " + userId;
    }
}
